// Mocks generated by Mockito 5.4.4 from annotations
// in vegawallet/test/datasource/remote_data_source_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:typed_data' as _i9;

import 'package:mockito/mockito.dart' as _i1;
import 'package:retrofit/retrofit.dart' as _i2;
import 'package:vegawallet/features/stores/data/data_sources/spreadsheet_downloader.dart'
    as _i5;
import 'package:vegawallet/features/stores/domain/entities/store.dart' as _i8;
import 'package:vegawallet/features/stores/domain/utils/excel_decoder_wrapper.dart'
    as _i3;
import 'package:vegawallet/features/stores/domain/utils/excel_mapper.dart'
    as _i4;
import 'package:vegawallet/features/stores/domain/utils/excel_parser.dart'
    as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeHttpResponse_0<T> extends _i1.SmartFake
    implements _i2.HttpResponse<T> {
  _FakeHttpResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeExcelDecoderWrapper_1 extends _i1.SmartFake
    implements _i3.ExcelDecoderWrapper {
  _FakeExcelDecoderWrapper_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeExcelMapper_2 extends _i1.SmartFake implements _i4.ExcelMapper {
  _FakeExcelMapper_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SpreadsheetDownloader].
///
/// See the documentation for Mockito's code generation for more information.
class MockSpreadsheetDownloader extends _i1.Mock
    implements _i5.SpreadsheetDownloader {
  MockSpreadsheetDownloader() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.HttpResponse<List<int>>> downloadExcelFile(
    String? format,
    String? spreadsheetId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #downloadExcelFile,
          [
            format,
            spreadsheetId,
          ],
        ),
        returnValue: _i6.Future<_i2.HttpResponse<List<int>>>.value(
            _FakeHttpResponse_0<List<int>>(
          this,
          Invocation.method(
            #downloadExcelFile,
            [
              format,
              spreadsheetId,
            ],
          ),
        )),
      ) as _i6.Future<_i2.HttpResponse<List<int>>>);

  @override
  _i6.Future<_i2.HttpResponse<List<int>>> downloadExcelFile2(
    String? token,
    String? format,
    String? spreadsheetId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #downloadExcelFile2,
          [
            token,
            format,
            spreadsheetId,
          ],
        ),
        returnValue: _i6.Future<_i2.HttpResponse<List<int>>>.value(
            _FakeHttpResponse_0<List<int>>(
          this,
          Invocation.method(
            #downloadExcelFile2,
            [
              token,
              format,
              spreadsheetId,
            ],
          ),
        )),
      ) as _i6.Future<_i2.HttpResponse<List<int>>>);
}

/// A class which mocks [ExcelParser].
///
/// See the documentation for Mockito's code generation for more information.
class MockExcelParser extends _i1.Mock implements _i7.ExcelParser {
  MockExcelParser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.ExcelDecoderWrapper get excelDecoder => (super.noSuchMethod(
        Invocation.getter(#excelDecoder),
        returnValue: _FakeExcelDecoderWrapper_1(
          this,
          Invocation.getter(#excelDecoder),
        ),
      ) as _i3.ExcelDecoderWrapper);

  @override
  _i4.ExcelMapper get excelMapper => (super.noSuchMethod(
        Invocation.getter(#excelMapper),
        returnValue: _FakeExcelMapper_2(
          this,
          Invocation.getter(#excelMapper),
        ),
      ) as _i4.ExcelMapper);

  @override
  List<_i8.Store> parse(_i9.Uint8List? bytes) => (super.noSuchMethod(
        Invocation.method(
          #parse,
          [bytes],
        ),
        returnValue: <_i8.Store>[],
      ) as List<_i8.Store>);
}
