// Mocks generated by Mockito 5.4.4 from annotations
// in vegawallet/test/bloc/location_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:vegawallet/core/data_state/data_state.dart' as _i3;
import 'package:vegawallet/core/services/connectivity_service.dart' as _i8;
import 'package:vegawallet/features/stores/domain/entities/position.dart'
    as _i7;
import 'package:vegawallet/features/stores/domain/repository/location_repository.dart'
    as _i2;
import 'package:vegawallet/features/stores/domain/usecases/get_picked_store_use_case.dart'
    as _i4;
import 'package:vegawallet/features/stores/domain/usecases/open_native_navigation_use_case.dart'
    as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLocationRepository_0 extends _i1.SmartFake
    implements _i2.LocationRepository {
  _FakeLocationRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDataState_1<T> extends _i1.SmartFake implements _i3.DataState<T> {
  _FakeDataState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetPickedStoreUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetPickedStoreUseCase extends _i1.Mock
    implements _i4.GetPickedStoreUseCase {
  MockGetPickedStoreUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.LocationRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeLocationRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.LocationRepository);

  @override
  _i5.Future<_i3.DataState<dynamic>> call({String? params}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#params: params},
        ),
        returnValue:
            _i5.Future<_i3.DataState<dynamic>>.value(_FakeDataState_1<dynamic>(
          this,
          Invocation.method(
            #call,
            [],
            {#params: params},
          ),
        )),
      ) as _i5.Future<_i3.DataState<dynamic>>);
}

/// A class which mocks [OpenNativeNavigationUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockOpenNativeNavigationUseCase extends _i1.Mock
    implements _i6.OpenNativeNavigationUseCase {
  MockOpenNativeNavigationUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.DataState<_i7.PositionSimple>> call({String? params}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#params: params},
        ),
        returnValue: _i5.Future<_i3.DataState<_i7.PositionSimple>>.value(
            _FakeDataState_1<_i7.PositionSimple>(
          this,
          Invocation.method(
            #call,
            [],
            {#params: params},
          ),
        )),
      ) as _i5.Future<_i3.DataState<_i7.PositionSimple>>);
}

/// A class which mocks [ConnectivityService].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectivityService extends _i1.Mock
    implements _i8.ConnectivityService {
  MockConnectivityService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Stream<bool> get internetConnectionStream => (super.noSuchMethod(
        Invocation.getter(#internetConnectionStream),
        returnValue: _i5.Stream<bool>.empty(),
      ) as _i5.Stream<bool>);

  @override
  set internetConnectionStream(_i5.Stream<bool>? _internetConnectionStream) =>
      super.noSuchMethod(
        Invocation.setter(
          #internetConnectionStream,
          _internetConnectionStream,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<bool> checkConnectivity() => (super.noSuchMethod(
        Invocation.method(
          #checkConnectivity,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Stream<bool> listenToConnectivity() => (super.noSuchMethod(
        Invocation.method(
          #listenToConnectivity,
          [],
        ),
        returnValue: _i5.Stream<bool>.empty(),
      ) as _i5.Stream<bool>);
}
