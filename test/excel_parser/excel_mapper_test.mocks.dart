// Mocks generated by Mockito 5.4.4 from annotations
// in vegawallet/test/excel_parser/excel_mapper_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:typed_data' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i3;
import 'package:spreadsheet_decoder/spreadsheet_decoder.dart' as _i2;
import 'package:vegawallet/features/stores/domain/utils/excel_decoder_wrapper.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSpreadsheetDecoder_0 extends _i1.SmartFake
    implements _i2.SpreadsheetDecoder {
  _FakeSpreadsheetDecoder_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SpreadsheetDecoder].
///
/// See the documentation for Mockito's code generation for more information.
class MockSpreadsheetDecoder extends _i1.Mock
    implements _i2.SpreadsheetDecoder {
  @override
  String get mediaType => (super.noSuchMethod(
        Invocation.getter(#mediaType),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#mediaType),
        ),
        returnValueForMissingStub: _i3.dummyValue<String>(
          this,
          Invocation.getter(#mediaType),
        ),
      ) as String);

  @override
  String get extension => (super.noSuchMethod(
        Invocation.getter(#extension),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#extension),
        ),
        returnValueForMissingStub: _i3.dummyValue<String>(
          this,
          Invocation.getter(#extension),
        ),
      ) as String);

  @override
  Map<String, _i2.SpreadsheetTable> get tables => (super.noSuchMethod(
        Invocation.getter(#tables),
        returnValue: <String, _i2.SpreadsheetTable>{},
        returnValueForMissingStub: <String, _i2.SpreadsheetTable>{},
      ) as Map<String, _i2.SpreadsheetTable>);

  @override
  String dumpXmlContent([String? sheet]) => (super.noSuchMethod(
        Invocation.method(
          #dumpXmlContent,
          [sheet],
        ),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.method(
            #dumpXmlContent,
            [sheet],
          ),
        ),
        returnValueForMissingStub: _i3.dummyValue<String>(
          this,
          Invocation.method(
            #dumpXmlContent,
            [sheet],
          ),
        ),
      ) as String);

  @override
  void insertColumn(
    String? sheet,
    int? columnIndex,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #insertColumn,
          [
            sheet,
            columnIndex,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeColumn(
    String? sheet,
    int? columnIndex,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #removeColumn,
          [
            sheet,
            columnIndex,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void insertRow(
    String? sheet,
    int? rowIndex,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #insertRow,
          [
            sheet,
            rowIndex,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeRow(
    String? sheet,
    int? rowIndex,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #removeRow,
          [
            sheet,
            rowIndex,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateCell(
    String? sheet,
    int? columnIndex,
    int? rowIndex,
    dynamic value,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #updateCell,
          [
            sheet,
            columnIndex,
            rowIndex,
            value,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<int> encode() => (super.noSuchMethod(
        Invocation.method(
          #encode,
          [],
        ),
        returnValue: <int>[],
        returnValueForMissingStub: <int>[],
      ) as List<int>);

  @override
  String dataUrl() => (super.noSuchMethod(
        Invocation.method(
          #dataUrl,
          [],
        ),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.method(
            #dataUrl,
            [],
          ),
        ),
        returnValueForMissingStub: _i3.dummyValue<String>(
          this,
          Invocation.method(
            #dataUrl,
            [],
          ),
        ),
      ) as String);
}

/// A class which mocks [SpreadsheetTable].
///
/// See the documentation for Mockito's code generation for more information.
class MockSpreadsheetTable extends _i1.Mock implements _i2.SpreadsheetTable {
  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
        returnValueForMissingStub: _i3.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
      ) as String);

  @override
  List<List<dynamic>> get rows => (super.noSuchMethod(
        Invocation.getter(#rows),
        returnValue: <List<dynamic>>[],
        returnValueForMissingStub: <List<dynamic>>[],
      ) as List<List<dynamic>>);

  @override
  int get maxRows => (super.noSuchMethod(
        Invocation.getter(#maxRows),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  int get maxCols => (super.noSuchMethod(
        Invocation.getter(#maxCols),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
}

/// A class which mocks [ExcelDecoderWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockExcelDecoderWrapper extends _i1.Mock
    implements _i4.ExcelDecoderWrapper {
  @override
  _i2.SpreadsheetDecoder decode(_i5.Uint8List? bytes) => (super.noSuchMethod(
        Invocation.method(
          #decode,
          [bytes],
        ),
        returnValue: _FakeSpreadsheetDecoder_0(
          this,
          Invocation.method(
            #decode,
            [bytes],
          ),
        ),
        returnValueForMissingStub: _FakeSpreadsheetDecoder_0(
          this,
          Invocation.method(
            #decode,
            [bytes],
          ),
        ),
      ) as _i2.SpreadsheetDecoder);
}
